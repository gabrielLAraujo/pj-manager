generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  projects      Project[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String         @id @default(uuid())
  name        String
  description String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  userId      String
  tasks       Task[]
  config      ProjectConfig?
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model ProjectConfig {
  id             String   @id @default(uuid())
  projectId      String   @unique @map("project_id")
  hourlyRate     Float    @map("hourly_rate")
  workDays       Json     @map("work_days")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  day_exceptions Json?
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_configs")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus
  createdAt   DateTime   @default(now())
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
}

enum TaskStatus {
  todo
  inprogress
  done
}
